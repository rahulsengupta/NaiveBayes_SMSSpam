sms_raw <- read.csv("sms_spam.csv", stringAsFactors = FALSE)
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
View(sms_raw)
sms_raw$type <- factor(sms_raw$type)
View(sms_raw)
str(sms_raw$type)
prop.table(table(sms_raw$type))
install.packages("tm")
library(tm)
sessionInfo()
sms_corpus <- Corpus(VectorSource(sms_raw$text))
inspect(sms_corpus[1:5])
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
stopwords()
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
inspect(corpus_clean)
sms_dtm <- DocumentTermMatrix(corpus_clean)
save.image("D:/MachineLearningWithR/NaiveBayesSMSSpam/DataCleaningDone.RData")
sms_raw_train <- sms_raw[1:4169, ]
sms_raw_test <- sms_raw[4170:5559, ]
sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test <- sms_dtm[4170:5559, ]
sms_corpus_train <- corpus_clean[1:4169]
sms_corpus_test <- corpus_clean[4170:5559]
prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type))
install.packages("wordcloud")
wordcloud(sms_corpus_train, min.freq = 40, random.order = FALSE)
library(wordcloud)
wordcloud(sms_corpus_train, min.freq = 40, random.order = FALSE)
spam <- subset(sms_raw_train, type == "spam")
ham <- subset(sms_raw_train, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))
save.image("D:/MachineLearningWithR/NaiveBayesSMSSpam/DataVisDone.RData")
findFreqTerms(sms_dtm_train, 5)
sms_dict <- Dictionary(findFreqTerms(sms_dtm_train, 5))
sms_dict <- c(findFreqTerms(sms_dtm_train, 5))
sms_dict
sms_train <- DocumentTermMatrix(sms_corpus_train, list(dictionary = sms_dict))
sms_test <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))
convert_counts <- function(x) {
x <- ifelse(x>0, 1 , 0)
x <- factor(x, levels = c(0,1), labels = c(""No"", ""Yes""))
return(x)
}
convert_counts <- function(x) {
x <- ifelse(x>0, 1 , 0)
x <- factor(x, levels = c(0,1), labels = c(""No"", ""Yes""))
return(x)
}
convert_counts <- function(x) {
x <- ifelse(x > 0, 1 , 0)
x <- factor(x, levels = c(0,1), labels = c(""No"", ""Yes""))
return(x)
}
convert_counts <- function(x) {
x <- ifelse(x > 0, 1 , 0)
x <- factor(x, levels = c(0,1), labels = c(""No"", ""Yes""))
return(x)}
convert_counts <- function(x) {x <- ifelse(x > 0, 1 , 0);x <- factor(x, levels = c(0,1), labels = c(""No"", ""Yes""));return(x);}
convert_counts <- function(x) {x <- ifelse(x > 0, 1 , 0);x <- factor(x, levels = c(0,1), labels = c("No", Yes"));return(x);}
sms_train <- apply(sms_train, MARGIN =2 , convert_counts)
convert_counts <- function(x) {x <- ifelse(x > 0, 1 , 0);x <- factor(x, levels = c(0,1), labels = c(""No"", ""Yes""));return(x);}
convert_counts <- function(x) {x <- ifelse(x > 0, 1 , 0);x <- factor(x, levels = c(0,1), labels = c("No", "Yes"));return(x);}
sms_train <- apply(sms_train, MARGIN =2 , convert_counts)
sms_test <- apply(sms_test, MARGIN =2 , convert_counts)
View(sms_test)
View(sms_train)
install.packages("e1071")
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_raw_train$type)
sms_test_pred <- predict(sms_classifier, sms_test)
library(gmodels)
CrossTable(sms_test_pred, sms_raw_test$type, dnn = c("Predicted", "Actual"))
sms_classifier_laplace1 <- naiveBayes(sms_train, sms_raw_train$type, laplace = 1 )
sms_test_pred_laplace1 <- predict(sms_classifier_laplace1, sms_test)
CrossTable(sms_test_pred_laplace1, sms_raw_test$type, dnn =c("Predicted", "Actual"))
save.image("D:/MachineLearningWithR/NaiveBayesSMSSpam/Done.RData")
